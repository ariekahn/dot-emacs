#+TITLE: Emacs Literate Configuration
#+AUTHOR: Ari Kahn
#+PROPERTY: header-args :tangle yes
* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

* Table of Contents :TOC_3_gh:
- [[#configuration][Configuration]]
- [[#documentation][Documentation]]
  - [[#useful-examples][Useful Examples]]
  - [[#package-configuration][Package configuration]]
- [[#personal-information][Personal Information]]
- [[#emacs-initialization][Emacs Initialization]]
  - [[#initialize-package-management][Initialize Package Management]]
  - [[#use-better-defaults][Use better defaults]]
  - [[#load-customel][load custom.el]]
  - [[#mac-shell-support][Mac Shell Support]]
- [[#packages][Packages]]
  - [[#org][Org]]
  - [[#toc-org][Toc-org]]
  - [[#org-ref][org-ref]]
  - [[#markdown][Markdown]]
  - [[#evil][Evil]]
  - [[#helm][Helm]]
  - [[#dashboard][Dashboard]]
  - [[#projectile][Projectile]]
  - [[#purpose][Purpose]]
  - [[#window-management][Window Management]]
  - [[#magit][Magit]]
- [[#theming][Theming]]
  - [[#leuven][Leuven]]
  - [[#hl-line][hl-line]]
- [[#navigation][Navigation]]
- [[#misc-functions][Misc Functions]]
  - [[#drag-and-drop-files][Drag and Drop files]]
- [[#keybindings][Keybindings]]

* Documentation
** Useful Examples
https://github.com/gilbertw1/emacs-literate-starter

https://github.com/angrybacon/dotemacs

** Package configuration
Basic example:

ensure: Install the package if it doesn't exist yet
pin: Specify a particular repository to use for a package
* Personal Information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ari Kahn"
	user-mail-address "ariekahn@gmail.com")
#+END_SRC
* Emacs Initialization      
  Disable some byte-compile warnings that get annoying
#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC

** Initialize Package Management
Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'.
Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which
we promptly install if it's missing. Finally we load =use-package= and tell it to always install any
missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all
of the package initialization during compilation so that when byte compiled, all of this time consuming
code is skipped. This can be done because the result of byte compiling =use-package= statements results
in the macro being fully expanded at which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been
previously compiled manually then all of the package initialization will still take place at startup.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)

    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

    ;; emacs 27+ runs package-initialize automatically
    (unless package--initialized (package-initialize t))
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC
** Use better defaults

Some UI elements are rather invasive.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (blink-cursor-mode 0)                           ; Disable the cursor blinking
    (scroll-bar-mode 0)                             ; Disable the scroll bar
    (tool-bar-mode 0)                               ; Disable the tool bar
    (tooltip-mode 0))                               ; Disable the tooltips
#+END_SRC

We don't want autosave files cluttering everything up.

Instead, we'll have emacs store them in the =tmp= directory.

#+BEGIN_SRC emacs-lisp
  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))

  ;; And modify how emacs names and holds onto them
  (setq
     backup-by-copying t      ; don't clobber symlinks
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups
#+END_SRC

** load custom.el

We don't want customizations to clutter up =init.el=.
Instead, let's put them in =custom.el=, and load them separately here.

#+BEGIN_SRC emacs-lisp
  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

** Mac Shell Support
This loads our PATH and related variables from the shell on mac
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC
* Packages
** Dash
#+begin_src emacs-lisp
  (use-package dash
    :ensure t)
  (use-package dash-functional
    :ensure t)
#+end_src
** S
#+begin_src emacs-lisp
  (use-package s
    :ensure t)
#+end_src
** Org
This is going to be a big one.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :pin org
    :defer t
    :bind (("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c l" . org-store-link)
           ("C-c b" . helm-org-in-buffer-headings))
    :config
    ;; Set where we look for refile targets
    (setq org-refile-targets '((nil :maxlevel . 3)))
    ;; Set how we display matches
    (setq org-refile-use-outline-path nil)
    (setq org-startup-indented t)
    ;; Org-agenda
    (setq org-agenda-files (list
                            "~/Dropbox/org/research.org"
                            "~/Dropbox/org/meetings-dani.org"
                                          ;"~/Dropbox/org/courses.org"
                            "~/Dropbox/org/todo.org"))
    ;; org-agenda messes up window setups. Have it keep the same window.
    (setq org-agenda-window-setup 'current-window)
    ;; Indent based on header level
    (setq org-indent-mode t)
    ;; Use globally unique IDs when linking
    (setq org-id-link-to-org-use-id t)
    )

  ;; Enable visual-line-mode (word wrapping) for org-mode 
  (add-hook 'org-mode-hook 'visual-line-mode)

  ;; Ensure ELPA org is prioritized above built-in org.
  (require 'cl-lib)
  (setq load-path (cl-remove-if
                   (lambda (x) (string-match-p "org$" x))
                   load-path))
#+END_SRC

M-RET splits the current line by default. This gets really annoying after a while.

 #+BEGIN_SRC emacs-lisp
   (setq org-M-RET-may-split-line nil)
 #+END_SRC

We're going to add some custom views into org-agenda.

This first one just shows a combined view of our scheduled and full todo list

The second one gives us a list of tasks that are waiting.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((agenda "")
            (alltodo "")))
          ("w" "Waiting view"
           ((todo ""
                  ((org-agenda-skip-function '(or (org-agenda-skip-subtree-if 'nottodo '("WAIT"))
                                                  (org-agenda-blocked-p))
                   (org-agenda-overriding-header "Tasks waiting for something: "))))))))
#+END_SRC

Our setup for TODO items:

First, set our possible states.
- '!' logs a timestamp
- '@' logs a timestamp with a note
- '/!' logs a timestamp when /leaving/ a state, but only if new state doesn't log a timestamp
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
    '((sequence "TODO(t!)" "WAIT(w@)" "IN-PROGRESS(p@)" "|" "DONE(d!)" "CANCELED(c@)")))
#+END_SRC

Additional configuration
#+BEGIN_SRC emacs-lisp
  ;; Create a ‘CLOSED: [timestamp]’ line when we finish an item
  (setq org-log-done 'time)
  ;; When we log multiple changes to the same item, only show the most recent timestamp
  (setq org-agenda-skip-additional-timestamps-same-entry t)
  ;; Don't clutter notes with the state changes.
  ;; Instead, log them all into a LOGBOOK drawer
  (setq org-log-into-drawer t)
#+END_SRC 

Enable bash code block support
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((shell . t)
                                 (R .t)))
#+END_SRC

Don't prompt me to execute code blocks
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Org magit support
#+BEGIN_SRC emacs-lisp
  (use-package orgit
    :ensure t)
#+END_SRC

Org Download support
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :ensure t
    :config
    (setq org-download-image-dir "~/Dropbox/org/img")
    (setq org-download-heading-lvl 2)
    (setq org-download-screenshot-method "screencapture -i %s"))

#+END_SRC

Configure how org displays images

Putting this value in a list makes it a fallback, if we don't manually specify it
#+BEGIN_SRC emacs-lisp
  (setq org-image-actual-width '(300))
#+END_SRC

Prettier latex images
#+BEGIN_SRC emacs-lisp
  (setq org-latex-create-formula-image-program 'dvisvgm)
#+END_SRC

Narrow/widen DWIM
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  (global-set-key (kbd "C-x n") #'narrow-or-widen-dwim)
#+END_SRC

Better plain-list bullets

This replaces both * and - symbols with a circular bullet
#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ +\\([-*]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\(-\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

Interact with OSX Menubar
- See https://github.com/koddo/org-clock-statusbar-app
- Alternate version here: https://github.com/jordonbiondo/osx-org-clock-menubar
#+begin_src emacs-lisp
  (add-hook 'org-clock-in-hook (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e" (concat "tell application \"org-clock-statusbar\" to clock in \"" (replace-regexp-in-string "\"" "\\\\\"" org-clock-current-task) "\""))))
  (add-hook 'org-clock-out-hook (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e" "tell application \"org-clock-statusbar\" to clock out")))
#+end_src
** Org-capture
Configure org-capture.

#+BEGIN_SRC emacs-lisp :results output silent
    (setq org-capture-templates
    '(
    ;; TODO     (t) Todo template
    ;; ("t" "Tasks")
    ("t" "TODO"
     entry (file "~/Dropbox/org/todo.org")
     "* TODO %^{TITLE}
  :LOGBOOK:
  - State \"TODO\"       from \"\"           %U
  :END:
  %?
  "
     )

  ;;   ;; DONE     (d) Done template
  ;;   ("td" "DONE      (d) Done"
  ;;    entry (file "todo.org")
  ;;    "* DONE %^{TITLE}
  ;; CLOSED: %U
  ;; :LOGBOOK:
  ;; - State \"DONE\"       from \"\"           %U
  ;; :END:
  ;; %?
  ;; "
  ;;    )

    ;; Meeting Template
    ("m" "Meeting"
     entry (file+headline "~/Dropbox/org/research.org" "Meetings")
     "* %^{Title} - %<%Y-%m-%d> :meeting:
  :PROPERTIES:
  :Date: %^U
  :Participants: %^{Participants}
  :Title: %\\1
  :END:
  %i
  ,** Meeting Notes
  %?
  ,** Takeaway
  "
     )

    ("k" "Talk"
     entry (file+headline "~/Dropbox/org/research.org" "Talks")
     "* %^{Speaker} - %^{Title} :talk: 
  :PROPERTIES:
  :Date: %^U
  :Speaker: %\\1
  :Title: %\\2
  :Event: %^{Event|Lab Meeting|MindCORE|MINS}
  :END:
  %i
  ,** Talk Notes
  %?
  ,** Takeaway
  "
     )

    ("j" "Journal"
     entry (file+olp+datetree "~/Dropbox/org/private.gpg" "Journal")
     "* %^{Title}
  :PROPERTIES:
  :Date: %^U
  :END:
  %?"
     )

    ("w" "Work"
     entry (file+olp+datetree "~/Dropbox/org/research.org" "Notebook")
     "* %^{Title} :labnotebook:
  :PROPERTIES:
  :Date: %U
  :END:
  %?"
     )

    ("d" "Meeting (Dani)"
     entry (file+olp+datetree "~/Dropbox/org/research.org" "Notebook")
     "* Weekly Meeting with Dani :weeklymeeting:
  :PROPERTIES:
  :Date: %U
  :END:
  %?"
     )
    ))
#+END_SRC
** Org-ql
Org Query Language

This provides an easy way to search through org files, and operate on them or show reduced views
#+begin_src emacs-lisp
  ;; (use-package org-ql
  ;;   :load-path "/Users/ari/.emacs.d/lisp/org-ql")
  ;; (use-package org-ql-agenda
  ;;   :load-path "/Users/ari/.emacs.d/lisp/org-ql")
#+end_src
** Org-sidebar
Trying out a package that uses org-ql to create a sidebar overview

https://github.com/alphapapa/org-sidebar

#+begin_src emacs-lisp
  ;; (use-package org-sidebar
  ;;   :load-path "/Users/ari/.emacs.d/lisp/org-sidebar")
#+end_src
** Org-pomodoro
This allows us to use a pomodoro timer when clocking in/out
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :ensure t
    :commands (org-pomodoro)
    :config
    (add-hook 'org-pomodoro-finished-hook (lambda () (message-box "Timer up!")))
    (add-hook 'org-pomodoro-finished-hook (lambda ()
                                          (ns-do-applescript
                                           "display notification \"Timer up!\""))))

#+end_src
** Toc-org
 Let's set up =toc-org= after the org package. We also want to enable it when
 we initialize org-mode so we get an up-to-date toc.
 #+BEGIN_SRC emacs-lisp
 (use-package toc-org
   :after org
   :ensure t
   :init (add-hook 'org-mode-hook #'toc-org-enable))
 #+END_SRC
** org-ref

Basic usage: http://kitchingroup.cheme.cmu.edu/blog/2014/05/13/Using-org-ref-for-citations-and-references/

helm-ref provides the backend that allows searching through and interfacint with a bibtex file.
helm-ref is built on top of bibtex-completion.
See https://github.com/tmalsburg/helm-bibtex

Here we're using a library file that's generated by Mendeley, so if we want to add a PDF we should be doing it through mendeley.

Note there are a couple main commands.
By default, <C-c ]> is bound to org-ref-helm-insert-cite-link,
which is a fancy script around =helm-bibtex= where we possibly choose our bibliography

#+BEGIN_SRC emacs-lisp
  (setq reftex-default-bibliography '("/Users/ari/Dropbox/Zotero/library.bib"))
  (setq org-ref-default-bibliography '("/Users/ari/Dropbox/Zotero/library.bib")
        org-ref-pdf-directory "/Users/ari/Dropbox/Papers/"
        org-ref-bibliography-notes "/Users/ari/Dropbox/org/notes.org")

  ;; For helm
  (setq bibtex-completion-bibliography "/Users/ari/Dropbox/Zotero/library.bib"
        bibtex-completion-library-path "/Users/ari/Dropbox/Papers"
        bibtex-completion-notes-path "/Users/ari/Dropbox/org/notes.org")

  ;; Tell it to use the field Mendeley is populating
  (setq bibtex-completion-pdf-field "file")
  ;; open pdf with system pdf viewer (works on mac)
  ;; (setq bibtex-completion-pdf-open-function
  ;;   (lambda (fpath)
  ;;     (start-process "open" "*open*" "open" fpath)))

  ;; Set org-ref to use a function that can get the right field, in this case helm-bibtex
  (setq org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex)

  ;; Specify the backend we want to use out of helm/ivy/reftex
  (setq org-ref-completion-library 'org-ref-helm-bibtex)

  (use-package org-ref
    :ensure t)

  (defun my/remove-bibtex-braces (entry)
    "Replace all double curly braces in a bibtex entry"
    (replace-regexp-in-string "\\(?:{{\\|}}\\)" "" entry))

  (defun org-ref-reftex-get-bib-field (field entry &optional format)
    "Get FIELD from a bibtex ENTRY in optional FORMAT.
    Similar to `reftex-get-bib-field', but removes enclosing braces
    and quotes in FIELD in the bibtex ENTRY."
    (let ((result))
      (setq result (reftex-get-bib-field field entry format))
      (if (string= field "title")
          (setq result (my/remove-bibtex-braces result)))
      (when (and (not (string= result "")) (string= "{" (substring result 0 1)))
        (setq result (substring result 1 -1)))
      (when (and (not (string= result "")) (string= "\"" (substring result 0 1)))
        (setq result (substring result 1 -1)))
      result))


  ;; Make helm use the same note function as org-ref
  (defun my/org-ref-notes-function (candidates)
    (let ((key (helm-marked-candidates)))
      (funcall org-ref-notes-function (car key))))

  (helm-delete-action-from-source "Edit notes" helm-source-bibtex)
  ;; Note that 7 is a magic number of the index where you want to insert the command. You may need to change yours.
  (helm-add-action-to-source "Edit notes" 'my/org-ref-notes-function helm-source-bibtex 7)

  ;; Add this at some point when I have a chance to fix the older notes
  ;; (defcustom org-ref-note-title-format
  ;;   "** TODO %y - %2a - %t
  ;;  :PROPERTIES:
  ;;   :Custom_ID: %k
  ;;   :AUTHOR: %9a
  ;;   :JOURNAL: %j
  ;;   :YEAR: %y
  ;;   :VOLUME: %v
  ;;   :PAGES: %p
  ;;   :DOI: %D
  ;;   :URL: %U
  ;;  :END:
  ;; "
  ;;   "String to format the title and properties drawer of a note.
  ;; See the `org-ref-reftex-format-citation' docstring for the escape
  ;; codes."
  ;;   :type 'string
  ;;   :group 'org-ref)

#+END_SRC
** Markdown
Obviously we want prettier support for markdown documents.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode) ; Git-flavor
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
** Evil
 We want evil for navigation
 #+BEGIN_SRC emacs-lisp
 (use-package evil
   :ensure t ;; install the evil package if not installed
   :init ;; tweak evil's configuration before loading it
   (setq evil-search-module 'evil-search)
   (setq evil-ex-complete-emacs-commands nil)
   (setq evil-vsplit-window-right t)
   (setq evil-split-window-below t)
   (setq evil-shift-round nil)
   (setq evil-want-C-u-scroll t)
   :config ;; tweak evil after loading it
   (evil-mode)
   )
 #+END_SRC

Make sure we have evil-surround support too.
This lets operate on symbols that surround words, like emphasis or tags.
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC

Let's use evil-leader mode

For now this is primarily for universal arguments.

E.g. press "SPC u" as a substitute for "Ctrl-u"
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode 1))

  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
    "u" 'universal-argument)
#+END_SRC
** Helm
 #+BEGIN_SRC emacs-lisp
   (use-package helm
       :ensure t
       )
 #+END_SRC

This function looks potentially interesting.
#+BEGIN_SRC emacs-lisp
  (use-package helm-org-rifle
    :ensure t
    )
#+END_SRC
** Dashboard
 #+BEGIN_SRC emacs-lisp
 (use-package dashboard
     :ensure t
     :config
     (dashboard-setup-startup-hook))
 #+END_SRC
** Projectile
 Projectile is a quick and easy project management package that "just works". We're
 going to install it and make sure it's loaded immediately.

 #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :demand t)
 #+END_SRC
** Purpose

This package confuses me a bit, but gonna try to figure it out.

#+BEGIN_SRC emacs-lisp
  ;(use-package window-purpose
  ;  :ensure t)
  ;(purpose-mode 1)
  ;(setq purpose-mode-user-purposes
  ;      '((term-mode . terminal)
#+END_SRC
** Window Management

Winner mode allows us to undo and redo window config changes.

By default this is bound to Ctrl-c Left and Ctrl-c Right

#+BEGIN_SRC emacs-lisp
  (use-package winner
    :ensure nil
    :defer 1
    :config (winner-mode 1))
#+END_SRC

Quick function that allows us to split an already split frame at the root level.

#+BEGIN_SRC emacs-lisp
  (defun my-split-root-window (size direction)
    (split-window (frame-root-window)
		  (and size (prefix-numeric-value size))
		  direction))

  (defun my-split-root-window-below (&optional size)
    (interactive "P")0
    (my-split-root-window size 'below))

  (defun my-split-root-window-right (&optional size)
    (interactive "P")
    (my-split-root-window size 'right))

  (defun my-split-root-window-dwim (&optional size)
    (interactive "P")
    ;; Are we currently in a vertical split?
    (if (window-combined-p nil nil)
	(my-split-root-window-right)
      (my-split-root-window-below)))

  (global-set-key (kbd "C-x 6") 'my-split-root-window-dwim)
#+END_SRC

** Magit

This gives us version control

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)

#+END_SRC
** Company
This provides code-completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t)
#+END_SRC
** Tern
Javascript support
#+BEGIN_SRC emacs-lisp
  ;; (use-package tern
  ;;   :ensure t)
  ;; (setenv "PATH" (concat (getenv "PATH") "/Users/ari/.nvm/versions/node/v11.1.0/bin/"))
  ;;(setq exec-path (append exec-path '("/Users/ari/.nvm/versions/node/v11.1.0/bin/")))
#+END_SRC
** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t)
#+end_src
** org-super-agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :ensure t)
#+end_src
* Theming
** Fonts
#+BEGIN_SRC emacs-lisp
  ;; (set-face-attribute 'default nil :family "Iosevka" :height 130)
  ;; (set-face-attribute 'fixed-pitch nil :family "Iosevka")
  (set-face-attribute 'variable-pitch nil :family "Libre Baskerville" :height 130)
#+END_SRC
** Variable Pitch Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook
               (lambda ()
                (variable-pitch-mode 1)))

  ;; Make sure that code blocks and tables use a fixed-ptich font
  (add-hook 'org-mode-hook
            (lambda ()
              (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
              (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
              (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
              ;; This fixes indentation for variable-pitch-mode, as long as org-indent-mode is on
              (set-face-attribute 'org-hide nil :inherit 'fixed-pitch)
              ;; And a few other things to keep fixed-pitch
              (set-face-attribute 'org-todo nil :inherit 'fixed-pitch)
              (set-face-attribute 'org-done nil :inherit 'fixed-pitch)
              (set-face-attribute 'org-meta-line nil :inherit 'fixed-pitch)
              ;; Give these a clear visual separator like levels 1 and 2
              (set-face-attribute 'org-level-3 nil :overline "#123555")
              (set-face-attribute 'org-level-4 nil :overline "#123555")
              (set-face-attribute 'org-level-5 nil :overline "#123555")
              (set-face-attribute 'org-level-6 nil :overline "#123555")
              (set-face-attribute 'org-level-7 nil :overline "#123555")
              (set-face-attribute 'org-level-8 nil :overline "#123555")

              ))
#+END_SRC
** Leuven
We're going to use the leuven theme, found here:
https://github.com/fniessen/emacs-leuven-theme

#+BEGIN_SRC emacs-lisp
  (use-package leuven-theme
    :ensure t
    :config
    (setq leuven-scale-outline-headlines nil) 
    (setq leuven-scale-org-agenda-structure nil)) 

  (load-theme 'leuven t)
#+END_SRC
** hl-line
This lets us highlight the current line under the cursor
#+BEGIN_SRC emacs-lisp
  (use-package hl-line
    :ensure nil
    :demand t
    :config
    (global-hl-line-mode 1))
#+END_SRC
** poet
Trying this for a pretty variable-pitch mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package poet-theme
  ;;   :ensure t)
  ;; (load-theme 'poet t)
#+END_SRC
* Navigation
This is helpful. Rebind <Ctrl-a> so that it still takes us to the start of the line,
but if we're already there, jump to the first non-whitespace character.

#+BEGIN_SRC emacs-lisp
  (global-set-key [remap move-beginning-of-line] #'me/beginning-of-line-dwim)

  (defun me/beginning-of-line-dwim ()
    "Move point to first non-whitespace character, or beginning of line."
    (interactive "^")
    (let ((origin (point)))
      (beginning-of-line)
      (and (= origin (point))
	   (back-to-indentation))))
#+END_SRC
* Misc Functions
** Drag and Drop files

#+BEGIN_SRC emacs-lisp
  (defun my\dnd-func (event)
    (interactive "e")
    (goto-char (nth 1 (event-start event)))
    (x-focus-frame nil)
    (let* ((payload (car (last event)))
	   (type (car payload))
	   (fname (cadr payload))
	   (img-regexp "\\(png\\|jp[e]?g\\)\\>"))
      (cond
       ;; insert image link
       ((and  (eq 'drag-n-drop (car event))
	      (eq 'file type)
	      (string-match img-regexp fname))
	(insert (format "[[%s]]" fname))
	(org-display-inline-images t t))
       ;; insert image link with caption
       ((and  (eq 'C-drag-n-drop (car event))
	      (eq 'file type)
	      (string-match img-regexp fname))
	(insert "#+ATTR_ORG: :width 300\n")
	(insert (concat  "#+CAPTION: " (read-input "Caption: ") "\n"))
	(insert (format "[[%s]]" fname))
	(org-display-inline-images t t))
       ;; C-drag-n-drop to open a file
       ((and  (eq 'C-drag-n-drop (car event))
	      (eq 'file type))
	(find-file fname))
       ((and (eq 'M-drag-n-drop (car event))
	     (eq 'file type))
	(insert (format "[[attachfile:%s]]" fname)))
       ;; regular drag and drop on file
       ((eq 'file type)
	(insert (format "[[%s]]\n" fname)))
       (t
	(error "I am not equipped for dnd on %s" payload)))))
  (define-key org-mode-map (kbd "<drag-n-drop>") 'my\dnd-func)
  (define-key org-mode-map (kbd "<C-drag-n-drop>") 'my\dnd-func)
  (define-key org-mode-map (kbd "<M-drag-n-drop>") 'my\dnd-func)
#+END_SRC
* Keybindings

#+BEGIN_SRC emacs-lisp
  ;; Helm find-files dialog
  (global-set-key (kbd "C-x C-f") #'helm-find-files)

  ;; Definitely want easy access to recent files
  (global-set-key (kbd "C-x C-r") #'helm-recentf)

  ;; The helm buffer list is significantly better
  (global-set-key (kbd "C-x b") #'helm-buffers-list)

  ;; Helm meta
  (global-set-key (kbd "M-x") #'helm-M-x)

  ;; Helm bookmarks
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  ;; Helm imenu for navigation
  (global-set-key (kbd "C-c i") #'helm-imenu)

  ;; Magit access
  (global-set-key (kbd "C-c m") #'magit)
  ;; Diff for the current file
  (global-set-key (kbd "C-c d") #'magit-diff-buffer-file)

  (helm-mode 1)
#+END_SRC
